<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Docs on UAPI group specifications</title><link>https://uapi-group.github.io/specifications/docs/</link><description>Recent content in Docs on UAPI group specifications</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://uapi-group.github.io/specifications/docs/index.xml" rel="self" type="application/rss+xml"/><item><title>Base Directory Specification</title><link>https://uapi-group.github.io/specifications/docs/base_directory_specification/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://uapi-group.github.io/specifications/docs/base_directory_specification/</guid><description>Base Directory Specification # Introduction # Various specifications specify files and file formats. This specification defines where these files should be looked for by defining one or more base directories relative to which files should be located.
Basics # The XDG Base Directory Specification is based on the following concepts:
There is a single base directory relative to which user-specific data files should be written. This directory is defined by the environment variable $XDG_DATA_HOME.</description></item><item><title>Boot Loader Specification</title><link>https://uapi-group.github.io/specifications/docs/boot_loader_specification/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://uapi-group.github.io/specifications/docs/boot_loader_specification/</guid><description>The Boot Loader Specification # This document defines a set of file formats and naming conventions that allow the boot loader menu entries to be shared between multiple operating systems and boot loaders installed on one device.
Operating systems cooperatively manage boot loader menu entry directories that contain drop-in files, making multi-boot scenarios easy to support. Boot menu entries are defined via two simple formats that can be understood by different boot loader implementations, operating systems, and userspace programs.</description></item><item><title>Discoverable Partitions Specification</title><link>https://uapi-group.github.io/specifications/docs/discoverable_partitions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://uapi-group.github.io/specifications/docs/discoverable_partitions/</guid><description>The Discoverable Partitions Specification (DPS) # TL;DR: Let&amp;rsquo;s automatically discover, mount and enable the root partition, /home/, /srv/, /var/ and /var/tmp/ and the swap partitions based on GUID Partition Tables (GPT)!
This specification describes the use of GUID Partition Table (GPT) UUIDs to enable automatic discovery of partitions and their intended mountpoints. Traditionally Linux has made little use of partition types, mostly just defining one UUID for file system/data partitions and another one for swap partitions.</description></item><item><title>Linux TPM PCR Registry</title><link>https://uapi-group.github.io/specifications/docs/linux-tpm-pcr-registry/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://uapi-group.github.io/specifications/docs/linux-tpm-pcr-registry/</guid><description>üîè Linux TPM PCR Registry üóíÔ∏è # TPM PCRs are a scarce resource, there are only 24 of them in typical standards compliant TPMs. According to the TCG PC Client Specific Platform Firmware Profile Specification | Trusted Computing Group PCRs 8‚Ä¶15 are for the OS to make use of. In this document we intend to document for Linux platforms which component is using which PCR in order to minimize conflicts.</description></item></channel></rss>